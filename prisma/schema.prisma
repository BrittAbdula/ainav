generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  emailVerified DateTime?
  image         String?
  name          String?
  accounts      Account[]
  favorites     UserFavorite[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model UserFavorite {
  userId    String
  linkId    Int
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  link      Link     @relation(fields: [linkId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, linkId])
}

model Link {
  id           Int            @id @default(autoincrement())
  title        String
  url          String         @unique
  imageUrl     String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  active       Boolean        @default(true)
  describe     String?
  innerUrl     String         @unique
  taskId       Int?
  task         Task?          @relation(fields: [taskId], references: [id])
  linkDetail   LinkDetail?
  userFavorite UserFavorite[]
}

model LinkDetail {
  id        Int      @id @default(autoincrement())
  linkId    Int      @unique
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime
  link      Link     @relation(fields: [linkId], references: [id])
}

model Task {
  id        Int      @id @default(autoincrement())
  task      String   @unique
  taskSlug  String?
  createdAt DateTime @default(now())
  updatedAt DateTime
  link      Link[]
}

model Visit {
  id        Int      @id @default(autoincrement())
  linkId    Int
  visitedAt DateTime @default(now())
}
