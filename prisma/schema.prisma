generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Task {
  id        Int      @id @default(autoincrement())
  task      String   @unique
  taskSlug  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  links     Link[]
}

model Link {
  id          Int          @id @default(autoincrement())
  title       String
  url         String       @unique
  innerUrl    String       @unique
  imageUrl    String?
  describe    String?
  active      Boolean      @default(true)
  taskId      Int?
  task        Task?    @relation(fields: [taskId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  linkDetail  LinkDetail?
  favorites   UserFavorite[]
}

model LinkDetail {
  id        Int      @id @default(autoincrement())
  linkId    Int      @unique
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  link      Link     @relation(fields: [linkId], references: [id])
}

model Visit {
  id        Int      @id @default(autoincrement())
  linkId    Int
  visitedAt DateTime @default(now())
}


// ------------------------------------------------------User Authentication start here------------------------------------------------------
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  favorites     UserFavorite[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 

// ------------------------------------------------------User Authentication end here------------------------------------------------------


model UserFavorite {
  userId    String
  linkId    Int
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  link      Link     @relation(fields: [linkId], references: [id])
  @@id([userId, linkId])
}